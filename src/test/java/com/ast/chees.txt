package com.vytrack.pages;

import com.vytrack.utilities.utility_driver.ConfigurationReader;
import com.vytrack.utilities.utility_driver.Driver;
import org.junit.Assert;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import java.util.List;

public class VytrackVehiclesPage {

    public VytrackVehiclesPage() {
        PageFactory.initElements( Driver.getDriver(), this );
    }

    WebDriver driver = Driver.getDriver();

    WebDriverWait webDriverWait = new WebDriverWait( driver, 10000 );

    // region Elements
    @FindBy(id = "prependedInput")
    public WebElement username;

    @FindBy(id = "prependedInput2")
    public WebElement password;

    @FindBy(id = "_submit")
    public WebElement loginBtn;

    @FindBy(xpath = "//a//span[normalize-space(text()) = 'Fleet' and contains(@class, title-level-1)]")
    public WebElement fleetModule;

    @FindBy(xpath = "//a//span[normalize-space(text()) = 'Customer' and contains(@class, title-level-1)]")
    public WebElement customerModule;

    @FindBy(xpath = "//span[.='Vehicles']")
    public WebElement vehicles;

    @FindBy(xpath = "//span[.='Vehicle Odometer']")
    public WebElement vehicleOdometer;

    @FindBy(xpath = "//div[contains(@class, 'left grid-toolbar')]//div[@class = 'btn-group']//a[contains(@class, 'dropdown-toggle')]")
    public WebElement exportGrid;

    @FindBy(xpath = "//ul//li//a[@title='CSV']")
    public WebElement CSVdropdowmBtn;

    @FindBy(xpath = "//ul//li//a[@title='XLSX']")
    public WebElement XLSXdropdownBtn;

    @FindBy(xpath = "//h1[contains(@class,'subtitle')]")
    public WebElement subTitle;
    @FindBy(css = "a[title='Reset']")
    public WebElement reset;
    @FindBy(css = "a[title='Grid Settings']")
    public WebElement gridSettings;
    @FindBy(xpath = "//div[@class='actions-panel pull-right form-horizontal']//div//a")
    public List<WebElement> listOfFilters;
    //endregion


    // region Actions
    public void loginToVytrack() {

        driver.get( ConfigurationReader.getProperty( "urlVyTrack" ) );

        username.sendKeys( ConfigurationReader.getProperty( "usernameVyTrack" ) );
        password.sendKeys( ConfigurationReader.getProperty( "passwordVyTrack" ) );
        loginBtn.click();
    }




    public void clickDropdown(String dropdownName) throws Exception {

        switch (dropdownName.toLowerCase()) {
            case "export grid":
                exportGrid.click();
                break;
            default:
                throw new Exception( "Unknown dropdown name:" + dropdownName );
        }
    }

    //endregion

    // region Assertion
    public void assertPageTitle(String pageTitle) throws InterruptedException {

        Thread.sleep( 3000 );
        Assert.assertFalse( subTitle.getText().isEmpty() );

        Assert.assertEquals( pageTitle, subTitle.getText() );

    }

    public void assertDropdownOption(String dropdownOptionName) throws Exception {

        switch (dropdownOptionName.toLowerCase()) {
            case "csv":
                Assert.assertTrue( CSVdropdowmBtn.isDisplayed() );
                break;
            case "xlsx":
                Assert.assertTrue( XLSXdropdownBtn.isDisplayed() );
                break;
            default:
                throw new Exception( "Unknown dropdown option name:" + dropdownOptionName );
        }

    }

    public void assertOneButtonIsLeftToAnother(String one, String two) {
        int leftWebElement = 0;
        int rightWebElement = 0;

        for (WebElement eachFilter : listOfFilters) {
            if (eachFilter.getAttribute( "title" ).equalsIgnoreCase( one )) {
                leftWebElement= eachFilter.getLocation().getX();
                System.out.println( "leftWebElement = " + leftWebElement );
            }
        }
        for (WebElement eachFilter : listOfFilters) {
            if (eachFilter.getAttribute( "title" ).equalsIgnoreCase( two )) {
                rightWebElement= eachFilter.getLocation().getX();
                System.out.println( "rightWebElement = " + rightWebElement );

            }
        }
        Assert.assertTrue( "Test failed, check button position", leftWebElement< rightWebElement );
    }

//endregion


// region Helper Methods

//endregion


}


======================================================================


package com.vytrack.step_definitions;

import com.cydeo.utilities.utility_driver.Driver;
import com.vytrack.pages.VytrackVehiclesPage;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;

public class VytrackVehiclesStepDef {
    VytrackVehiclesPage vytrackVehiclesPage = new VytrackVehiclesPage();

//region Given

    @Given("User on the home page")
    public void user_on_the_home_page() {
        vytrackVehiclesPage.loginToVytrack();
    }

//endregion

    // region When
    @When("I hover over to {string} module")
    public void i_hover_over_to_module(String fleet) throws Exception {
        vytrackVehiclesPage.hoverOverToFleet( fleet );

    }

    @When("I click {string} option")
    public void i_click_option(String vehicleName) throws Exception {
        vytrackVehiclesPage.clickSubModule( vehicleName );
    }

// endregion

    //region Then


    @Then("I should see {string} page title")
    public void i_should_see_page_title(String pageTitle) throws InterruptedException {
        vytrackVehiclesPage.assertPageTitle( pageTitle );
    }

    @Then("{string} button on the right side of {string}")
    public void button_on_the_right_side_of(String one, String two){
        vytrackVehiclesPage.assertOneButtonIsLeftToAnother(one, two);
        Driver.closeDriver();
    }

}
//endregion

//region Helper Methods

//endregion




I use Java as a programming language and j-unit as the testing framework.
Also i used in couple framework TestNG, so i familiar with it.

I use Maven for managing all the dependencies needed for our project
and GitHub for version control to check-in code files.

My framework is built with Data Driven approach with a combination of Page Object Model.
 I use Test data from external files in order to avoid hard-coding,
also Apache POI help me read Test Data from Excel files.

I use Cucumber Reports for detailed reporting
I take screenshots for failed test and attach screenshots to automation reports also.

My framework is very modular with created page classes for all the common components, not
 just for particular pages. If there is something common which occurs in different pages, so I create
Page Object for that also so that different Test Classes can make use of it.

I am using tags for handling different Test Suites Smoke and Regression Test
and Jenkins to run those different kind of Test Suites.

Whenever there is a deployment, our Smoke Test Suite is triggered and we have multiple Regression
Test Suites which run on different schedule. Some are triggered nightly,
some are triggered every two days and some are triggered weekly and their schedule
 also depends on how much time a particular Test Suite takes to complete.

As example, our Smoke Test completes under 30 mins, which verifies basic functionality.
Our nightly suite runs for 8 hours and weekend suite runs for about 24 hours so that we are covering
 all levels of testing.